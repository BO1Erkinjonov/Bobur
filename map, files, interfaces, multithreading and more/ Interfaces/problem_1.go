/*

Обязательные условия выполнения: данные со стандартного ввода читаются функцией readTask(), которая возвращает 3 значения типа пустой интерфейс.

Итак, вы получаете 3 значения типа пустой интерфейс: если все удачно, то первые 2 значения будут float64. Третье значение в идеальном случае будет строкой,
которая может иметь значения: "+", "-", "*", "/" (определенная математическая операция). Но такие идеальные случаи будут не всегда, вы можете
получить значения других типов, а также строка в третьем значении может не относится к одной из указанных математических операций.

Результат выполнения программы должен быть таков:

1	в штатной ситуации вы должны напечатать в стандартный вывод результат выполнения математической операции
	с точностью до 4 цифры после запятой (fmt.Printf(%.4f));

2	если первое или второе значение не является типом float64, вы должны напечатать сообщение об ошибке
	вида: value=полученное_значение: тип_значения (например: value=true: bool)

3	если третье значение имеет неверный тип или передан знак, не относящийся к указанным выше математическим операциям,
	сообщение об ошибке должно иметь вид: неизвестная операция

Гарантируется, что ошибка в аргументах может быть только одна, поэтому если вы при проверке первого значения увидели, что оно
содержит ошибку - печатайте сообщение об ошибке и завершайте работу программы, проверка остальных аргументов значения уже
не имеет, а проверяющая система воспримет 2 сообщения об ошибке как нарушение условия выполнения задания.

*/

package main

import (
	"fmt" // пакет используется для проверки ответа, не удаляйте его
	"reflect"
)

func readTask() (a, b, c interface{}) {

	a, b, c = 2.2, 3.3, "*"
	return a, b, c
}

func main() {
	value1, value2, operation := readTask() // исходные данные получаются с помощью этой функции
	if _, ok := value1.(float64); !ok {
		fmt.Printf("value=%v: %v", value1, reflect.TypeOf(value1))
		return
	}
	if _, ok := value2.(float64); !ok {
		fmt.Printf("value=%v: %v", value2, reflect.TypeOf(value2))
		return
	}
	switch operation {
	case "+":
		fmt.Printf("%.4f", value1.(float64)+value2.(float64))
	case "-":
		fmt.Printf("%.4f", value1.(float64)-value2.(float64))
	case "*":
		fmt.Printf("%.4f", value1.(float64)*value2.(float64))
	case "/":
		fmt.Printf("%.4f", value1.(float64)/value2.(float64))
	default:
		fmt.Println("неизвестная операция")
	}

}
